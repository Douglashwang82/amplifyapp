[{"D:\\Projects\\practice\\React_AWS_Amplify\\amplifyapp\\src\\reportWebVitals.js":"1","D:\\Projects\\practice\\React_AWS_Amplify\\amplifyapp\\src\\aws-exports.js":"2","D:\\Projects\\practice\\React_AWS_Amplify\\amplifyapp\\src\\App.js":"3"},{"size":362,"mtime":499162500000,"results":"4","hashOfConfig":"5"},{"size":874,"mtime":1606164444310,"results":"6","hashOfConfig":"5"},{"size":2758,"mtime":1606165134292,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1xn1kqk",{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"D:\\Projects\\practice\\React_AWS_Amplify\\amplifyapp\\src\\reportWebVitals.js",[],"D:\\Projects\\practice\\React_AWS_Amplify\\amplifyapp\\src\\aws-exports.js",[],"D:\\Projects\\practice\\React_AWS_Amplify\\amplifyapp\\src\\App.js",["15"],"import React, { useState, useEffect } from 'react';\nimport './App.css';\n//import { API } from 'aws-amplify';\nimport { withAuthenticator, AmplifySignOut } from '@aws-amplify/ui-react';\nimport { listTodos } from './graphql/queries';\nimport { createTodo as createNoteMutation, deleteTodo as deleteNoteMutation } from './graphql/mutations';\n\nimport { API, Storage } from 'aws-amplify';\n\nconst initialFormState = { name: '', description: '' }\n\nfunction App() {\n  const [notes, setNotes] = useState([]);\n  const [formData, setFormData] = useState(initialFormState);\n\n  useEffect(() => {\n    fetchNotes();\n  }, []);\n\n  async function fetchNotes() {\n    const apiData = await API.graphql({ query: listTodos });\n    const notesFromAPI = apiData.data.listNotes.items;\n    await Promise.all(notesFromAPI.map(async note => {\n      if (note.image) {\n        const image = await Storage.get(note.image);\n        note.image = image;\n      }\n      return note;\n    }))\n    setNotes(apiData.data.listNotes.items);\n  }\n\n  async function createNote() {\n    if (!formData.name || !formData.description) return;\n    await API.graphql({ query: createNoteMutation, variables: { input: formData } });\n    if (formData.image) {\n      const image = await Storage.get(formData.image);\n      formData.image = image;\n    }\n    setNotes([ ...notes, formData ]);\n    setFormData(initialFormState);\n  }\n\n  async function deleteNote({ id }) {\n    const newNotesArray = notes.filter(note => note.id !== id);\n    setNotes(newNotesArray);\n    await API.graphql({ query: deleteNoteMutation, variables: { input: { id } }});\n  }\n\n  //image\n  async function onChange(e) {\n    if (!e.target.files[0]) return\n    const file = e.target.files[0];\n    setFormData({ ...formData, image: file.name });\n    await Storage.put(file.name, file);\n    fetchNotes();\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>My Notes App</h1>\n      <input\n        onChange={e => setFormData({ ...formData, 'name': e.target.value})}\n        placeholder=\"Note name\"\n        value={formData.name}\n      />\n      <input\n        onChange={e => setFormData({ ...formData, 'description': e.target.value})}\n        placeholder=\"Note description\"\n        value={formData.description}\n      />\n\n<input\n  type=\"file\"\n  onChange={onChange}\n/>\n\n      <button onClick={createNote}>Create Note</button>\n      <div style={{marginBottom: 30}}>\n      {\n  notes.map(note => (\n    <div key={note.id || note.name}>\n      <h2>{note.name}</h2>\n      <p>{note.description}</p>\n      <button onClick={() => deleteNote(note)}>Delete note</button>\n      {\n        note.image && <img src={note.image} style={{width: 400}} />\n      }\n    </div>\n  ))\n}\n      </div>\n      <AmplifySignOut />\n    </div>\n  );\n}\n\nexport default withAuthenticator(App);",{"ruleId":"16","severity":1,"message":"17","line":87,"column":23,"nodeType":"18","endLine":87,"endColumn":68},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]