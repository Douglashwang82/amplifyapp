[{"D:\\Projects\\practice\\React_AWS_Amplify\\amplifyapp\\src\\reportWebVitals.js":"1","D:\\Projects\\practice\\React_AWS_Amplify\\amplifyapp\\src\\aws-exports.js":"2","D:\\Projects\\practice\\React_AWS_Amplify\\amplifyapp\\src\\App.js":"3","D:\\Projects\\practice\\React_AWS_Amplify\\amplifyapp\\src\\graphql\\mutations.js":"4","D:\\Projects\\practice\\React_AWS_Amplify\\amplifyapp\\src\\graphql\\queries.js":"5","D:\\Projects\\practice\\React_AWS_Amplify\\amplifyapp\\src\\index.js":"6"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":874,"mtime":1606562266679,"results":"9","hashOfConfig":"8"},{"size":10933,"mtime":1606580591363,"results":"10","hashOfConfig":"8"},{"size":2851,"mtime":1606562264239,"results":"11","hashOfConfig":"8"},{"size":1809,"mtime":1606562264036,"results":"12","hashOfConfig":"8"},{"size":608,"mtime":1606336808216,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1xn1kqk",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"D:\\Projects\\practice\\React_AWS_Amplify\\amplifyapp\\src\\reportWebVitals.js",[],["28","29"],"D:\\Projects\\practice\\React_AWS_Amplify\\amplifyapp\\src\\aws-exports.js",[],"D:\\Projects\\practice\\React_AWS_Amplify\\amplifyapp\\src\\App.js",["30","31","32"],"import React, { useState, useEffect } from 'react';\nimport './App.css';\n//import { API } from 'aws-amplify';\nimport { withAuthenticator, AmplifySignOut } from '@aws-amplify/ui-react';\nimport { listNotes, listUserms, listGoals } from './graphql/queries';\nimport { createNote as createNoteMutation, deleteNote as deleteNoteMutation } from './graphql/mutations';\n//import { onCreateTodo } from './graphql/subscriptions';\nimport { API, Storage } from 'aws-amplify';\nimport {Auth } from 'aws-amplify';\n//User mission\nimport { createUserm  as createUsermNoteMutation, deleteUserm as deleteUsermNoteMutation, updateUserm as updateUsermNoteMutation} from './graphql/mutations';\n\n//Goal \nimport {createGoal as createGoalMutation, deleteGoal as deleteGoalMutation, updateGoal as updateGoalmutation} from './graphql/mutations';\n\nconst initialFormState = { name: '', description: '', city:'Taipei'}\nconst initialGoals =[{name:\"Test\",mission_id:[\"1\",\"2\"],mission_topic:[\"test1\",\"test2\"],percentage:\"F\"}]\nconst initialGoalFormState = {name:'',mission_id:[],mission_topic:[],percentage:\"F\"}\nconst initialCheckBox = [];\n\nfunction App() {\n  \n  const [username, setUser] = useState(Auth.user.username);\n  const [notes, setNotes] = useState([]);\n  const [formData, setFormData] = useState(initialFormState);\n\n  // User notes\n  const [userNotes, setUsermNotes] = useState([]);\n\n  //Goal list\n  const [goals, setGoals] = useState([]);\n  const [goalFormData, setGoalFormData] = useState(initialGoalFormState);\n  const [checkboxform, setCheckBox] = useState([]);\n  const [completedGoals, setCompleteGoals] = useState([]);\n\n  useEffect(() => {\n    fetchNotes();\n    fetchUsermNote();\n    fetchGoals();\n  }, []);\n\n\n  async function fetchNotes() {\n    const apiData = await API.graphql({ query: listNotes });\n    const notesFromAPI = apiData.data.listNotes.items;\n    await Promise.all(notesFromAPI.map(async note => {\n      if (note.image) {\n        const image = await Storage.get(note.image);\n        note.image = image;\n      }\n      return note;\n    }))\n    setNotes(notesFromAPI);\n  }\n\n  async function createNote() {\n    if (!formData.name || !formData.description) return;\n    await API.graphql({ query: createNoteMutation, variables: { input: formData } });\n    if (formData.image) {\n      const image = await Storage.get(formData.image);\n      formData.image = image;\n    }\n    setNotes([...notes, formData]);\n    setFormData(initialFormState);\n  }\n\n  async function deleteNote({ id }) {\n    const newNotesArray = notes.filter(note => note.id !== id);\n    console.log(id);\n    setNotes(newNotesArray);\n    await API.graphql({ query: deleteNoteMutation, variables: { input: { id } } });\n  }\n\n  //image\n  async function onChange(e) {\n    if (!e.target.files[0]) return\n    const file = e.target.files[0];\n    formData.image = file.name\n    setFormData({ ...formData});\n    await Storage.put(file.name, file);\n    fetchNotes();\n  }\n\n\n  //save into user database\n  async function fetchUsermNote() {\n    const apiData = await API.graphql({ query: listUserms });\n    const notesFromAPI = apiData.data.listUserms.items;\n    setUsermNotes(notesFromAPI);\n  }\n  \n  async function createUsermNote( { id , name}) {\n    console.log(name);\n    let noteinfo = {\n        mission_id: id,\n        mission_topic: name,\n        percentage: \"False\"\n      }\n    console.log(\"h\")\n    await API.graphql({ query: createUsermNoteMutation, variables: { input: noteinfo } });\n    console.log(\"s\")\n    setUsermNotes([...userNotes, noteinfo]);\n  }\n\n  async function deleteUsermNote( {id }) {\n    const newUsermNotesArray = userNotes.filter(note => note.id !== id);\n    setUsermNotes(newUsermNotesArray);\n    await API.graphql({ query: deleteUsermNoteMutation, variables: { input: { id } } });\n  }\n  \n  async function updateUsermNote({id}) {\n    fetchUsermNote();\n    let percentage = \"True\";\n    await API.graphql({ query: updateUsermNoteMutation, variables: {input: { id, percentage }}  });\n    console.log(\"out update\");\n    fetchUsermNote();\n  }\n\n  \n  // Goal approach\n\n  async function fetchGoals(){\n    const apiData = await API.graphql({ query: listGoals });\n    const goalsFromAPI = apiData.data.listGoals.items;\n    setGoals(goalsFromAPI);\n  }\n\n  async function createGoal(){\n    if (!goalFormData.name) return;\n    await API.graphql({ query: createGoalMutation, variables: { input: goalFormData } });\n    console.log(goalFormData);\n    fetchGoals();\n    setGoalFormData(initialGoalFormState);\n    setCheckBox(initialCheckBox);\n    document.getElementsByName(\"mission_checkbox\").forEach(element => {\n      element.checked = false;\n    \n    });\n      }\n  \n  \n  async function deleteGoal({id}){\n    await API.graphql({ query: deleteGoalMutation, variables: { input: { id } } });\n    fetchGoals();\n  }\n  async function updateGoal({id ,name}){\n    fetchGoals();\n    let percentage = \"True\";\n    await API.graphql({ query: updateGoalmutation, variables: {input: { id, percentage }}  });\n    console.log(\"out update\");\n    fetchGoals();\n    completedGoals.push(name);\n    console.log(completedGoals);\n    setCompleteGoals(completedGoals);\n  }\n\n  function test(length,ar1,ar2)\n  {\n    var i;\n    let newar =[];\n    for (i = 0; i < length; i++)\n  {\n   newar.push([ar1[i],ar2[i]]);\n  }\n  return (\n    <div>\n      {newar.map(note =>(\n        <div className = \"grid-container\">\n        {/* <div className = \"grid-item\">\n        <p hidden>Mission_id:{note[0]}</p>\n        </div> */}\n        <div className = \"grid-item\">\n        <p>Mission_topic:{note[1]}</p>\n        </div>\n        </div>\n      ))}\n    </div>\n  )\n  }\n\n  function getCheckBox(){\n    let newarray = [];\n    let topic = [];\n    let id = [];\n    document.getElementsByName(\"mission_checkbox\").forEach(element => {\n      if (element.checked) {\n        newarray.push(element.value)\n      }\n    \n    });\n    newarray.forEach(e => {\n      let res = e.split(\",\");\n\n      id.push(res[0]);\n      topic.push(res[1]);\n    })\n    setCheckBox(newarray);\n    setGoalFormData({...goalFormData,mission_id:id, mission_topic : topic})\n\n  }\n\n\n  //------------------------------------------------------------------HTML\n  return (\n    <div className=\"App\">\n      <h1>Deep Travel</h1>\n      <h4> Username: {username}</h4>\n      <div className = 'container'>\n      <h3>Completed Goals</h3>\n      {\n        completedGoals.map(e => (\n          <p>{e}</p>\n        ))\n      }\n      </div>\n      <div className='container'>\n      <h2>AddMission</h2>\n        <div className = \"inputfield\">\n          <label>Topic of Mission: </label>\n          <input\n            onChange={e => setFormData({ ...formData, 'name': e.target.value })}\n            placeholder=\"Note name\"\n            value={formData.name}\n          />\n        </div>\n        <div className = \"inputfield\">\n          <label>City: </label>\n          <select name = \"citys\" id = \"citys\" defaultValue = \"California\" \n          onChange={e => setFormData({ ...formData, 'city': e.target.value })}>\n            <option>Taipei</option>\n            <option>California</option>\n            <option>Kingmen</option>\n          </select>\n        </div>\n        <div className = \"inputfield\">\n          <label>Steps: </label>\n          <input\n            onChange={e => setFormData({ ...formData, 'description': e.target.value })}\n            placeholder=\"Note description\"\n            value={formData.description}\n          />\n        </div>\n        <div>\n          <label>Image: </label>\n          <input\n            type=\"file\"\n            onChange={onChange}\n          />\n        </div>\n        <div className = \"inputfield\">\n          <button onClick={createNote}>Create Mission</button>\n        </div>\n      </div>\n\n      <div style={{ marginBottom: 30 }}>\n      <h2>All Posts</h2>\n        {\n          notes.map(note => (\n            <div className = \"container\">\n            <div className = \"post\" key={note.id || note.name}>\n              <h3>Topic: {note.name}</h3>\n              <p>City: {note.city}</p>\n              <p>Steps: {note.description}</p>\n              <p hidden>Mission Id: {note.id}</p>\n              \n              {\n                // eslint-disable-next-line\n                note.image && <img src={note.image} style={{ width: 400 }} />\n              }\n              <button onClick={() => deleteNote(note)}>Delete Mission</button>\n              <button onClick={() => createUsermNote(note)}>Add Mission</button>\n            </div>\n            </div>\n          ))\n        }\n      </div>\n    \n\n      {/* Feature post */}\n      \n      <div style={{ marginBottom: 30 }}>\n      <h2> Mission Taken</h2>\n      {\n          userNotes.map(note => (\n            <div className = \"container\">\n            <div className = \"post\" key={note.id || note.mission_topic}>\n              <h3>Topic: {note.mission_topic}</h3>\n              <p hidden>id: {note.id}</p>\n              <p hidden>mission_id: {note.mission_id}</p>\n              <p>Complete: {note.percentage} </p>\n              <button onClick={() => updateUsermNote(note)}>Complete Mission</button>\n              <button onClick={() => deleteUsermNote(note)}>Delete Mission</button>\n            </div>\n            </div>\n          ))\n        }\n      </div>\n\n      {/* Goal */}\n      {/* Goal Adding */}\n      <div className='container'>\n      <h2>Add Goal</h2>\n        <div className = \"inputfield\">\n          <label>Topic of Goal: </label>\n          <input\n            onChange={e => setGoalFormData({ ...goalFormData, 'name': e.target.value })}\n            placeholder=\"Goal name\"\n            value={goalFormData.name}\n          />\n        </div>\n        <div className = \"inputfield\">\n          <label>Mission: </label>\n          {\n            notes.map(e=>(\n            //<input type=\"checkbox\" value ={e.mission_topic}><label>{e.mission_topic}</label></input>\n            <div>\n            <input type=\"checkbox\" name =\"mission_checkbox\" value = {[e.id,e.name]} onChange = {getCheckBox}></input>\n            <label>{e.name}</label>\n            </div>\n            ))\n          }\n        </div>\n        <div className = \"inputfield\">\n          <button onClick={createGoal}>Create Mission</button>\n        </div>\n      </div>\n\n      {/* Goal list */}\n      <div style={{ marginBottom: 30 }}>\n        <h2>Goal list</h2>\n          {\n          goals.map(goal => (\n            <div className = \"container\">\n            <div className = \"post\" key={goal.id}>\n              <h3>Topic: {goal.name}</h3>\n              <div>\n              \n              {\n                test(goal.mission_id.length,goal.mission_id,goal.mission_topic)\n              }\n              <p>Complete: {goal.percentage}</p>\n              </div>\n              <button onClick={() => updateGoal(goal)}>Complete Goal</button>\n              <button onClick={() => deleteGoal(goal)}>Delete Goal</button>\n            </div>\n            </div>\n          ))\n        }\n      </div>\n      <AmplifySignOut />\n    </div>\n  );\n}\n\nexport default withAuthenticator(App);","D:\\Projects\\practice\\React_AWS_Amplify\\amplifyapp\\src\\graphql\\mutations.js",[],"D:\\Projects\\practice\\React_AWS_Amplify\\amplifyapp\\src\\graphql\\queries.js",[],"D:\\Projects\\practice\\React_AWS_Amplify\\amplifyapp\\src\\index.js",[],{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":17,"column":7,"nodeType":"39","messageId":"40","endLine":17,"endColumn":19},{"ruleId":"37","severity":1,"message":"41","line":23,"column":20,"nodeType":"39","messageId":"40","endLine":23,"endColumn":27},{"ruleId":"37","severity":1,"message":"42","line":33,"column":10,"nodeType":"39","messageId":"40","endLine":33,"endColumn":22},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-unused-vars","'initialGoals' is assigned a value but never used.","Identifier","unusedVar","'setUser' is assigned a value but never used.","'checkboxform' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]